Features:

1. Using Depth-first search algorithm with priorities
Using Stack so it will execute all of the relationship possibilities (Limited to list of tables that has already been used) + prioritise the relationship with additional keyword

2. Parameter based (config.cfg)
	-> You can set the search limit

3. Faster than Brute force, because:
	a. Using Customer knowledge rather than building from scratch (From, to and destination)
	b. Use stack method with proirities
	c. Have relationship exception list
	
4. The code is unit tested, to minimise bugs
	


Next:

1. Save the paths that were used, so it can be used to enhance the next execution performance 

2. (When destination word is not found) Use Machine learning, to learn why the join is wrong, and update the list of wrong join relationship
	- Might use a parameter to set the limit of number iteration to be ran
	- Run the new program based on the mistakes made in the previous sessions (Learn)
	
Limitation:

1. If a table is wrongly joined with other table, then that table is no longer can be used for other iteration	

	-Solution:
	1. Make a list of known wrong join, and this is where the machine learning works (By adding known wrong join)

Problems encountered during the dev.


1. Algorithm return multiple tablerelationship which causing problem in stack -- Fixed

	-Solution: 
	1. To still consider a table that already have been used. (Make a mark for relationship that has it). Put exception list table for relationship

	1. To only output 1 tablerelationship when the rel have the same col from and col to (So concatinate it, instead separate it) -- > Cannot use this solution, because it will break the keyword algorithm in the next step


